/**
 * AJAX Form Handling
 * Contact forms, quote requests, and other AJAX submissions
 */

(function() {
  'use strict';

  // ========================================
  // Configuration
  // ========================================
  const CONFIG = {
    // Mock API endpoints - replace with actual backend URLs
    endpoints: {
      contact: '/api/contact',
      quote: '/api/quote',
      newsletter: '/api/newsletter',
      career: '/api/career',
      login: '/api/login',
      support: '/api/support'
    },
    // CSRF token - should be generated by backend
    csrfToken: document.querySelector('meta[name="csrf-token"]')?.content || ''
  };

  // ========================================
  // Utility Functions
  // ========================================
  const showLoader = (button) => {
    button.dataset.originalText = button.innerHTML;
    button.disabled = true;
    button.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Sending...';
  };

  const hideLoader = (button) => {
    button.disabled = false;
    button.innerHTML = button.dataset.originalText;
  };

  const showNotification = (message, type = 'success') => {
    // Using Bootstrap alerts
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3`;
    alertDiv.style.zIndex = '9999';
    alertDiv.setAttribute('role', 'alert');
    alertDiv.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    
    document.body.appendChild(alertDiv);
    
    // Auto-dismiss after 5 seconds
    setTimeout(() => {
      alertDiv.remove();
    }, 5000);
  };

  const validateEmail = (email) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  };

  const validatePhone = (phone) => {
    // Indian phone number validation: +91 followed by 10 digits
    const re = /^\+91\s?\d{5}\s?\d{5}$/;
    return re.test(phone);
  };

  // ========================================
  // Contact Form Handler
  // ========================================
  const initContactForm = () => {
    const contactForm = document.getElementById('contactForm');
    
    if (!contactForm) return;
    
    contactForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const submitButton = contactForm.querySelector('button[type="submit"]');
      const formData = new FormData(contactForm);
      const data = Object.fromEntries(formData.entries());
      
      // Validation
      if (!validateEmail(data.email)) {
        showNotification('Please enter a valid email address', 'danger');
        return;
      }
      
      if (data.phone && !validatePhone(data.phone)) {
        showNotification('Please enter a valid Indian phone number (+91 XXXXX XXXXX)', 'danger');
        return;
      }
      
      showLoader(submitButton);
      
      try {
        // Mock API call - replace with actual endpoint
        const response = await fetch(CONFIG.endpoints.contact, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': CONFIG.csrfToken
          },
          body: JSON.stringify(data)
        });
        
        // For demo purposes, simulate success
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        hideLoader(submitButton);
        
        // Simulate success (since backend doesn't exist yet)
        showNotification('Thank you! Your message has been sent successfully. We\'ll get back to you soon.', 'success');
        contactForm.reset();
        contactForm.classList.remove('was-validated');
        
        // Track conversion (Google Analytics, etc.)
        if (typeof gtag !== 'undefined') {
          gtag('event', 'form_submission', {
            'event_category': 'Contact',
            'event_label': 'Contact Form'
          });
        }
        
      } catch (error) {
        hideLoader(submitButton);
        console.error('Error:', error);
        showNotification('Sorry, something went wrong. Please try again or email us directly.', 'danger');
      }
    });
  };

  // ========================================
  // Quote Request Form Handler
  // ========================================
  const initQuoteForm = () => {
    const quoteForm = document.getElementById('quoteForm');
    
    if (!quoteForm) return;
    
    quoteForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const submitButton = quoteForm.querySelector('button[type="submit"]');
      const formData = new FormData(quoteForm);
      const data = Object.fromEntries(formData.entries());
      
      // Validation
      if (!validateEmail(data.email)) {
        showNotification('Please enter a valid email address', 'danger');
        return;
      }
      
      if (!validatePhone(data.phone)) {
        showNotification('Please enter a valid Indian phone number', 'danger');
        return;
      }
      
      showLoader(submitButton);
      
      try {
        // Mock API call
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        hideLoader(submitButton);
        showNotification('Quote request received! Our team will contact you within 24 hours.', 'success');
        quoteForm.reset();
        quoteForm.classList.remove('was-validated');
        
        // Close modal if in modal
        const modal = quoteForm.closest('.modal');
        if (modal) {
          const bsModal = bootstrap.Modal.getInstance(modal);
          if (bsModal) bsModal.hide();
        }
        
        // Track conversion
        if (typeof gtag !== 'undefined') {
          gtag('event', 'form_submission', {
            'event_category': 'Lead',
            'event_label': 'Quote Request'
          });
        }
        
      } catch (error) {
        hideLoader(submitButton);
        console.error('Error:', error);
        showNotification('Sorry, something went wrong. Please try again.', 'danger');
      }
    });
  };

  // ========================================
  // Newsletter Subscription Handler
  // ========================================
  const initNewsletterForm = () => {
    const newsletterForms = document.querySelectorAll('.newsletter-form');
    
    newsletterForms.forEach(form => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const submitButton = form.querySelector('button[type="submit"]');
        const emailInput = form.querySelector('input[type="email"]');
        const email = emailInput.value;
        
        if (!validateEmail(email)) {
          showNotification('Please enter a valid email address', 'danger');
          return;
        }
        
        showLoader(submitButton);
        
        try {
          // Mock API call
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          hideLoader(submitButton);
          showNotification('Successfully subscribed to our newsletter!', 'success');
          form.reset();
          
          // Track subscription
          if (typeof gtag !== 'undefined') {
            gtag('event', 'newsletter_signup', {
              'event_category': 'Engagement',
              'event_label': 'Newsletter'
            });
          }
          
        } catch (error) {
          hideLoader(submitButton);
          console.error('Error:', error);
          showNotification('Subscription failed. Please try again.', 'danger');
        }
      });
    });
  };

  // ========================================
  // Career Application Form Handler
  // ========================================
  const initCareerForm = () => {
    const careerForm = document.getElementById('careerForm');
    
    if (!careerForm) return;
    
    careerForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const submitButton = careerForm.querySelector('button[type="submit"]');
      const formData = new FormData(careerForm);
      
      // Check if resume file is attached
      const resumeFile = formData.get('resume');
      if (!resumeFile || resumeFile.size === 0) {
        showNotification('Please attach your resume', 'danger');
        return;
      }
      
      // Check file size (max 5MB)
      if (resumeFile.size > 5 * 1024 * 1024) {
        showNotification('Resume file size should be less than 5MB', 'danger');
        return;
      }
      
      // Check file type
      const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];
      if (!allowedTypes.includes(resumeFile.type)) {
        showNotification('Please upload resume in PDF or DOC format', 'danger');
        return;
      }
      
      showLoader(submitButton);
      
      try {
        // Mock API call with file upload
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        hideLoader(submitButton);
        showNotification('Application submitted successfully! We\'ll review your profile and get back to you.', 'success');
        careerForm.reset();
        careerForm.classList.remove('was-validated');
        
      } catch (error) {
        hideLoader(submitButton);
        console.error('Error:', error);
        showNotification('Application submission failed. Please try again.', 'danger');
      }
    });
  };

  // ========================================
  // Login Form Handler
  // ========================================
  const initLoginForm = () => {
    const loginForm = document.getElementById('loginForm');
    
    if (!loginForm) return;
    
    loginForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const submitButton = loginForm.querySelector('button[type="submit"]');
      const formData = new FormData(loginForm);
      const data = Object.fromEntries(formData.entries());
      
      if (!validateEmail(data.email)) {
        showNotification('Please enter a valid email address', 'danger');
        return;
      }
      
      showLoader(submitButton);
      
      try {
        // Mock API call
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        // Simulate successful login
        localStorage.setItem('isLoggedIn', 'true');
        localStorage.setItem('userEmail', data.email);
        
        hideLoader(submitButton);
        showNotification('Login successful! Redirecting to dashboard...', 'success');
        
        // Redirect to dashboard
        setTimeout(() => {
          window.location.href = 'dashboard.html';
        }, 1500);
        
      } catch (error) {
        hideLoader(submitButton);
        console.error('Error:', error);
        showNotification('Invalid credentials. Please try again.', 'danger');
      }
    });
  };

  // ========================================
  // Support Ticket Form Handler
  // ========================================
  const initSupportForm = () => {
    const supportForm = document.getElementById('supportForm');
    
    if (!supportForm) return;
    
    supportForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const submitButton = supportForm.querySelector('button[type="submit"]');
      const formData = new FormData(supportForm);
      const data = Object.fromEntries(formData.entries());
      
      showLoader(submitButton);
      
      try {
        // Mock API call
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        hideLoader(submitButton);
        
        // Generate mock ticket ID
        const ticketId = 'TKT-' + Math.random().toString(36).substr(2, 9).toUpperCase();
        
        showNotification(`Support ticket created successfully! Ticket ID: ${ticketId}`, 'success');
        supportForm.reset();
        supportForm.classList.remove('was-validated');
        
      } catch (error) {
        hideLoader(submitButton);
        console.error('Error:', error);
        showNotification('Failed to create support ticket. Please try again.', 'danger');
      }
    });
  };

  // ========================================
  // File Upload Preview
  // ========================================
  const initFileUploadPreview = () => {
    const fileInputs = document.querySelectorAll('input[type="file"]');
    
    fileInputs.forEach(input => {
      input.addEventListener('change', (e) => {
        const file = e.target.files[0];
        const preview = input.nextElementSibling;
        
        if (file && preview && preview.classList.contains('file-preview')) {
          const fileSize = (file.size / 1024 / 1024).toFixed(2);
          preview.textContent = `${file.name} (${fileSize} MB)`;
          preview.classList.add('show');
        }
      });
    });
  };

  // ========================================
  // Real-time Form Validation
  // ========================================
  const initRealtimeValidation = () => {
    const forms = document.querySelectorAll('form');
    
    forms.forEach(form => {
      const inputs = form.querySelectorAll('input, textarea, select');
      
      inputs.forEach(input => {
        input.addEventListener('blur', () => {
          if (input.checkValidity()) {
            input.classList.remove('is-invalid');
            input.classList.add('is-valid');
          } else {
            input.classList.remove('is-valid');
            input.classList.add('is-invalid');
          }
        });
        
        input.addEventListener('input', () => {
          if (input.classList.contains('is-invalid') || input.classList.contains('is-valid')) {
            if (input.checkValidity()) {
              input.classList.remove('is-invalid');
              input.classList.add('is-valid');
            } else {
              input.classList.remove('is-valid');
              input.classList.add('is-invalid');
            }
          }
        });
      });
    });
  };

  // ========================================
  // Initialize All AJAX Handlers
  // ========================================
  const init = () => {
    initContactForm();
    initQuoteForm();
    initNewsletterForm();
    initCareerForm();
    initLoginForm();
    initSupportForm();
    initFileUploadPreview();
    initRealtimeValidation();
  };

  // Run when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

})();

